{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","components/Scroll.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","Scroll","console","log","style","overflow","border","height","App","onSearchChange","event","searchfield","target","value","fetch","response","json","users","filteredRobots","filter","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAYeA,G,YAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,4BC6CCQ,EAdF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GAEzB,OACI,sBAAKC,UAAU,sDAAf,UACG,qBAAKC,IAAK,SAASC,IAAG,+BAA0BH,EAA1B,cACtB,gCACI,6BAAKF,IACL,4BAAIC,WCGDK,EAvBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAKlB,OACI,8BAEEA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OACD,cAAC,EAAD,CAEGR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHfS,SCnBIC,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACM,qBAAKT,UAAY,MAAjB,SACA,uBACCA,UAAW,mCACXU,KAAM,SACNC,YAAY,gBACZC,SAAUH,OCcHI,E,kDArBX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,UAAU,GAHA,E,8DAQDC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAKxB,OAAGG,KAAKJ,MAAMC,SACH,0DAEJG,KAAKL,MAAMO,a,GAlBCC,aCUZC,EAVD,SAACT,GAEX,OADAU,QAAQC,IAAIX,GAER,sBAAKY,MAAO,CAACC,SAAS,SAAUC,OAAO,kBAAkBC,OAAO,SAAhE,UACOf,EAAMO,SADb,QCgEOS,G,wDAzDZ,aAAc,IAAD,8BACX,gBA2BFC,eAAiB,SAACC,GAChB,EAAKZ,SAAS,CAACa,YAAcD,EAAME,OAAOC,QAC1CX,QAAQC,IAAIO,EAAME,OAAOC,QA5BzB,EAAKpB,MAAM,CACTX,OAAS,GACT6B,YAAa,IAEfT,QAAQC,IAAI,eAND,E,gEASO,IAAD,OAGlBW,MAAM,8CACA9C,MAAK,SAAA+C,GACJ,OAAOA,EAASC,UAEjBhD,MAAK,SAAAiD,GACH,EAAKnB,SAAS,CAAChB,OAASmC,S,+BAgBzB,IAAD,OACCC,EAAiBrB,KAAKJ,MAAMX,OAAOqC,QAAO,SAAArC,GAC5C,OAAOA,EAAOP,KAAK6C,cAAcC,SAAS,EAAK5B,MAAMkB,YAAYS,kBAGrE,OADAlB,QAAQC,IAAI,UACqB,IAA7BN,KAAKJ,MAAMX,OAAOwC,OACZ,yCAGP,sBAAK5C,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAAcU,KAAKY,iBAC9B,cAAC,EAAD,UACA,cAAC,EAAD,UACA,cAAC,EAAD,CAAU3B,OAAQoC,e,GAhDZlB,cCMlBuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACA,cAAC,EAAD,MAGAC,SAASC,eAAe,SAW1B9D,M","file":"static/js/main.7b79b689.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\n// const Card = (props) => {\r\n// \treturn (\r\n//      <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n//         <img alt ='robots' src={`https://robohash.org/${props.id}?200x200`} />\r\n//         <div>\r\n//             <h2>{props.name}</h2>\r\n//             <p>{props.email}</p>\r\n//         </div>\r\n//       </div>\r\n\r\n// \t\t)\r\n// }\r\n// export default Card;\r\n\r\n\r\n//destructuring first way \r\n\r\n// const Card = (props) => {\r\n// \tconst {name,email,id} = props;\r\n// \treturn (\r\n//      <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n//         <img alt ='robots' src={`https://robohash.org/${id}?200x200`} />\r\n//         <div>\r\n//             <h2>{name}</h2>\r\n//             <p>{email}</p>\r\n//         </div>\r\n//       </div>\r\n\r\n// \t\t)\r\n\t\r\n// }\r\n// export default Card;\r\n\r\n//destructuring 2nd way much cleaner way \r\n\r\n\r\nconst Card = ({name,email,id}) => {\r\n\t\r\n\treturn (\r\n     <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img alt ='robots' src={`https://robohash.org/${id}?200x200`} />\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n      </div>\r\n\r\n\t\t)\r\n\t\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n// const CardList = ({robots}) => {\r\n// \tconst cardComponent = robots.map((user,i) =>{\r\n// \t\treturn  (\r\n// \t\t\t<Card key={i} \r\n// \t\t    id={robots[i].id} \r\n// \t\t    name={robots[i].name} \r\n// \t\t    email={robots[i].email}\r\n// \t\t    />\r\n// \t\t    )\r\n// \t})\r\n// \treturn (\r\n// \t\t   <div>\r\n// \t\t   {cardComponent}\r\n// \t\t   </div>\r\n// \t\t    )\r\n\r\n// }\r\n\r\n// export default CardList;\r\n\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\t//  if (true) {\r\n\t// \t throw new Error('NOOOOOOOOO!');\r\n\t//  }\r\n\t\r\n\treturn (\r\n\t\t   <div>\r\n\t\t   { \r\n\t\t   \t robots.map((user,i) =>{\r\n\t\t     return  (\r\n\t\t\t   <Card \r\n\t\t\t   key={i} \r\n\t\t       id={robots[i].id} \r\n\t\t       name={robots[i].name} \r\n\t\t       email={robots[i].email}\r\n\t\t       />\r\n\t\t    );\r\n\t      })\r\n\t\t  }\r\n\t\t  </div>\r\n        )\r\n\r\n}\r\nexport default CardList;\r\n\r\n\r\n\r\n // <div>\r\n\t// \t    <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\r\n\t\t    \r\n\t// \t    <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\r\n\t// \t    <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\r\n\t// \t    </div>","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n       <div className = 'pa2'>\r\n       <input \r\n        className ='pa3 ba b--green bg-lightest-blue'\r\n        type =\"search\" \r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n        />\r\n       </div>\r\n\r\n\r\n  );\r\n}\r\nexport default SearchBox;","import React, { Component}  from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            hasError :false\r\n        }\r\n    }\r\n    \r\n\r\n   componentDidCatch(error, info){\r\n       this.setState({hasError: true})\r\n   }\r\n\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Ooooops That is not good</h1>\r\n        }\r\n        return this.props.children\r\n\r\n    }\r\n}\r\nexport default ErrorBoundry;","import React from 'react';\r\n\r\nconst Scroll =(props) =>{\r\n    console.log(props)\r\n    return (\r\n        <div style={{overflow:'scroll', border:'5px solid black',height:'800px'}}>\r\n              {props.children};\r\n        </div>\r\n      \r\n    ); \r\n\r\n}\r\nexport default Scroll;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport Scroll from '../components/Scroll';\nimport './App.css';\n// import {robots} from './robots';\n\n// import logo from './logo.svg';\n\n\nclass App extends Component {\n   constructor(){\n     super()\n     this.state={\n       robots : [],\n       searchfield :''\n     }\n     console.log('constructor')\n   }\n\n   componentDidMount(){\n    //  this.setState({robots : robots})\n    // console.log('componentDidMount')\n    fetch('https://jsonplaceholder.typicode.com/users')\n         .then(response=>{\n           return response.json();\n         })\n         .then(users=>{\n            this.setState({robots : users})\n     \n         });\n    //short form if you have one line of cose inside the bracket \n    //\n    // fetch('https://jsonplaceholder.typicode.com/users')\n    //      .then(response=> return response.json());\n    //      .then(users=>this.setState({robots : users})   \n         \n        }\n\n   onSearchChange = (event) => {\n     this.setState({searchfield : event.target.value})\n     console.log(event.target.value)\n   }\n\n  render(){\n     const filteredRobots = this.state.robots.filter(robots => {\n         return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n     })\n     console.log('render')\n     if (this.state.robots.length === 0 ){\n         return<h1>Loading</h1>\n     }else{\n        return (\n        <div className='tc'>\n            <h1 className='f1'>RoboFriends</h1>\n            <SearchBox searchChange={this.onSearchChange}/>\n            <Scroll>\n            <ErrorBoundry>\n            <CardList robots={filteredRobots}/>\n            </ErrorBoundry>\n            </Scroll>\n        </div>\n  );\n     }\n  }\n  }\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card';\n// import CardList from './CardList';\nimport 'tachyons'; \nimport reportWebVitals from './reportWebVitals';\n// import {robots} from './robots';\nimport App from './containers/App';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <Hello greeting = {'Hello' + 'React Ninja'}/>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}